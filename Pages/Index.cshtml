@page
@model MatrixProcessor.Pages.IndexModel
@{
    ViewData["Title"] = "Matrix Processor";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Matrix Processor</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <style>
        textarea {
            width: 100%;
            resize: none;
        }
        .result {
            white-space: pre-wrap;
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <h1>Matrix Processor</h1>

        <div class="card mb-3">
            <div class="card-header">Transpose Matrix</div>
            <div class="card-body">
                <form id="transposeForm">
                    <div class="form-group">
                        <label for="transposeMatrixInput">Enter matrix (comma-separated rows and columns):</label>
                        <textarea id="transposeMatrixInput" rows="5" class="form-control"></textarea>
                    </div>
                    <button type="submit" class="btn btn-primary">Transpose Matrix</button>
                </form>
                <h2>Result:</h2>
                <pre id="transposeResult" class="result"></pre>
            </div>
        </div>

        <div class="card mb-3">
            <div class="card-header">Calculate Determinant</div>
            <div class="card-body">
                <form id="determinantForm">
                    <div class="form-group">
                        <label for="determinantMatrixInput">Enter square matrix (comma-separated rows and columns):</label>
                        <textarea id="determinantMatrixInput" rows="5" class="form-control"></textarea>
                    </div>
                    <button type="submit" class="btn btn-primary">Calculate Determinant</button>
                </form>
                <h2>Result:</h2>
                <pre id="determinantResult" class="result"></pre>
            </div>
        </div>

        <div class="card mb-3">
            <div class="card-header">Multiply Matrices</div>
            <div class="card-body">
                <form id="multiplyForm">
                    <div class="form-group">
                        <label for="matrixAInput">Enter first matrix (comma-separated rows and columns):</label>
                        <textarea id="matrixAInput" rows="5" class="form-control"></textarea>
                    </div>
                    <div class="form-group">
                        <label for="matrixBInput">Enter second matrix (comma-separated rows and columns):</label>
                        <textarea id="matrixBInput" rows="5" class="form-control"></textarea>
                    </div>
                    <button type="submit" class="btn btn-primary">Multiply Matrices</button>
                </form>
                <h2>Result:</h2>
                <pre id="multiplyResult" class="result"></pre>
            </div>
        </div>
    </div>

    <script>
        document.getElementById('transposeForm').addEventListener('submit', async function (e) {
            e.preventDefault();
            await processMatrixForm('transposeMatrixInput', 'transposeResult', '/api/matrix/transpose');
        });

        document.getElementById('determinantForm').addEventListener('submit', async function (e) {
            e.preventDefault();
            await processMatrixForm('determinantMatrixInput', 'determinantResult', '/api/matrix/determinant');
        });

        document.getElementById('multiplyForm').addEventListener('submit', async function (e) {
            e.preventDefault();
            let matrixAInput = document.getElementById('matrixAInput').value.trim();
            let matrixBInput = document.getElementById('matrixBInput').value.trim();

            if (!matrixAInput || !matrixBInput) {
                document.getElementById('multiplyResult').textContent = 'Please enter both matrices.';
                return;
            }

            let matrixA, matrixB;
            try {
                matrixA = parseMatrix(matrixAInput);
                matrixB = parseMatrix(matrixBInput);
            } catch (error) {
                document.getElementById('multiplyResult').textContent = 'Invalid matrix format. Please ensure rows and columns are comma-separated numbers.';
                return;
            }

            try {
                let response = await fetch('/api/matrix/multiply', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ MatrixA: matrixA, MatrixB: matrixB })
                });

                if (response.ok) {
                    let multipliedMatrix = await response.json();
                    document.getElementById('multiplyResult').textContent = multipliedMatrix.map(row => row.join(', ')).join('\n');
                } else {
                    let errorMessage = await response.text();
                    document.getElementById('multiplyResult').textContent = 'Error multiplying matrices: ' + errorMessage;
                }
            } catch (error) {
                document.getElementById('multiplyResult').textContent = 'Error multiplying matrices: ' + error.message;
            }
        });

        async function processMatrixForm(inputId, resultId, apiUrl) {
            let matrixInput = document.getElementById(inputId).value.trim();
            if (!matrixInput) {
                document.getElementById(resultId).textContent = 'Please enter a matrix.';
                return;
            }

            let matrix;
            try {
                matrix = parseMatrix(matrixInput);
            } catch (error) {
                document.getElementById(resultId).textContent = 'Invalid matrix format. Please ensure rows and columns are comma-separated numbers.';
                return;
            }

            try {
                let response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(matrix)
                });

                 if (response.ok) {
                    let result = await response.json();
                    document.getElementById(resultId).textContent = Array.isArray(result) ? result.map(row => row.join(', ')).join('\n') : result;
                } else {
                    let errorMessage = await response.text();
                    document.getElementById(resultId).textContent = 'Error processing matrix: ' + errorMessage;
                }
            } catch (error) {
                document.getElementById(resultId).textContent = 'Error processing matrix: ' + error.message;
            }
        }

        function parseMatrix(input) {
            return input.split('\n').map(row => row.split(',').map(Number));
        }
    </script>
</body>
</html>